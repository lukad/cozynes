use macroquad::{prelude::*, ui::root_ui};

use cozynes::{cpu::Cpu, mem::Mem};

fn window_conf() -> Conf {
    Conf {
        window_title: "NES emulator".into(),
        window_width: 320 * 2,
        window_height: 320 * 2,
        window_resizable: false,
        high_dpi: true,
        ..Default::default()
    }
}

const SCREEN_WIDTH: usize = 32;
const SCREEN_HEIGHT: usize = 32;

fn color(byte: u8) -> [u8; 4] {
    match byte {
        0 => BLACK,
        1 => WHITE,
        2 | 9 => GRAY,
        3 | 10 => RED,
        4 | 11 => GREEN,
        5 | 12 => BLUE,
        6 | 13 => MAGENTA,
        7 | 14 => YELLOW,
        _ => LIME,
    }
    .into()
}

fn read_screen_state(cpu: &Cpu, frame: &mut [u8]) -> bool {
    let mut update = false;
    for (chunk, byte) in frame.chunks_exact_mut(4).zip(&cpu.memory[0x0200..0x0600]) {
        let color = color(*byte);
        if *chunk != color {
            update = true;
            chunk.copy_from_slice(&color);
        }
    }
    update
}

fn handle_input(cpu: &mut Cpu) {
    if is_key_pressed(KeyCode::Escape) {
        std::process::exit(0);
    }
    if is_key_pressed(KeyCode::Up) {
        cpu.write_byte(0xff, 0x77);
    }
    if is_key_pressed(KeyCode::Down) {
        cpu.write_byte(0xff, 0x73);
    }
    if is_key_pressed(KeyCode::Left) {
        cpu.write_byte(0xff, 0x61);
    }
    if is_key_pressed(KeyCode::Right) {
        cpu.write_byte(0xff, 0x64);
    }
    if is_key_pressed(KeyCode::R) {
        cpu.memory = [0; 0xFFFF];
        cpu.load_code(&GAME);
        cpu.reset();
        cpu.running = true;
    }
}

const GAME: [u8; 309] = [
    0x20, 0x06, 0x06, 0x20, 0x38, 0x06, 0x20, 0x0d, 0x06, 0x20, 0x2a, 0x06, 0x60, 0xa9, 0x02, 0x85,
    0x02, 0xa9, 0x04, 0x85, 0x03, 0xa9, 0x11, 0x85, 0x10, 0xa9, 0x10, 0x85, 0x12, 0xa9, 0x0f, 0x85,
    0x14, 0xa9, 0x04, 0x85, 0x11, 0x85, 0x13, 0x85, 0x15, 0x60, 0xa5, 0xfe, 0x85, 0x00, 0xa5, 0xfe,
    0x29, 0x03, 0x18, 0x69, 0x02, 0x85, 0x01, 0x60, 0x20, 0x4d, 0x06, 0x20, 0x8d, 0x06, 0x20, 0xc3,
    0x06, 0x20, 0x19, 0x07, 0x20, 0x20, 0x07, 0x20, 0x2d, 0x07, 0x4c, 0x38, 0x06, 0xa5, 0xff, 0xc9,
    0x77, 0xf0, 0x0d, 0xc9, 0x64, 0xf0, 0x14, 0xc9, 0x73, 0xf0, 0x1b, 0xc9, 0x61, 0xf0, 0x22, 0x60,
    0xa9, 0x04, 0x24, 0x02, 0xd0, 0x26, 0xa9, 0x01, 0x85, 0x02, 0x60, 0xa9, 0x08, 0x24, 0x02, 0xd0,
    0x1b, 0xa9, 0x02, 0x85, 0x02, 0x60, 0xa9, 0x01, 0x24, 0x02, 0xd0, 0x10, 0xa9, 0x04, 0x85, 0x02,
    0x60, 0xa9, 0x02, 0x24, 0x02, 0xd0, 0x05, 0xa9, 0x08, 0x85, 0x02, 0x60, 0x60, 0x20, 0x94, 0x06,
    0x20, 0xa8, 0x06, 0x60, 0xa5, 0x00, 0xc5, 0x10, 0xd0, 0x0d, 0xa5, 0x01, 0xc5, 0x11, 0xd0, 0x07,
    0xe6, 0x03, 0xe6, 0x03, 0x20, 0x2a, 0x06, 0x60, 0xa2, 0x02, 0xb5, 0x10, 0xc5, 0x10, 0xd0, 0x06,
    0xb5, 0x11, 0xc5, 0x11, 0xf0, 0x09, 0xe8, 0xe8, 0xe4, 0x03, 0xf0, 0x06, 0x4c, 0xaa, 0x06, 0x4c,
    0x35, 0x07, 0x60, 0xa6, 0x03, 0xca, 0x8a, 0xb5, 0x10, 0x95, 0x12, 0xca, 0x10, 0xf9, 0xa5, 0x02,
    0x4a, 0xb0, 0x09, 0x4a, 0xb0, 0x19, 0x4a, 0xb0, 0x1f, 0x4a, 0xb0, 0x2f, 0xa5, 0x10, 0x38, 0xe9,
    0x20, 0x85, 0x10, 0x90, 0x01, 0x60, 0xc6, 0x11, 0xa9, 0x01, 0xc5, 0x11, 0xf0, 0x28, 0x60, 0xe6,
    0x10, 0xa9, 0x1f, 0x24, 0x10, 0xf0, 0x1f, 0x60, 0xa5, 0x10, 0x18, 0x69, 0x20, 0x85, 0x10, 0xb0,
    0x01, 0x60, 0xe6, 0x11, 0xa9, 0x06, 0xc5, 0x11, 0xf0, 0x0c, 0x60, 0xc6, 0x10, 0xa5, 0x10, 0x29,
    0x1f, 0xc9, 0x1f, 0xf0, 0x01, 0x60, 0x4c, 0x35, 0x07, 0xa0, 0x00, 0xa5, 0xfe, 0x91, 0x00, 0x60,
    0xa6, 0x03, 0xa9, 0x00, 0x81, 0x10, 0xa2, 0x00, 0xa9, 0x01, 0x81, 0x10, 0x60, 0xa2, 0x00, 0xea,
    0xea, 0xca, 0xd0, 0xfb, 0x60,
];

#[macroquad::main(window_conf)]
async fn main() {
    pretty_env_logger::init();

    let mut cpu = Cpu::new();
    cpu.memory = [0; 0xFFFF];
    cpu.load_code(&GAME);
    cpu.reset();
    cpu.running = true;

    rand::srand(std::time::Instant::now().elapsed().as_millis() as u64);

    let w = screen_width() as usize;
    let h = screen_height() as usize;

    let mut image = Image::gen_image_color(SCREEN_WIDTH as u16, SCREEN_HEIGHT as u16, BLUE);

    let texture = Texture2D::from_image(&image);
    texture.set_filter(FilterMode::Nearest);

    loop {
        clear_background(WHITE);
        read_screen_state(&cpu, &mut image.bytes);
        texture.update(&image);
        root_ui().label(None, &format!("FPS: {}", get_fps()));
        draw_texture_ex(
            texture,
            0.0,
            0.0,
            WHITE,
            DrawTextureParams {
                dest_size: Some(vec2(w as f32, h as f32)),
                ..Default::default()
            },
        );
        for _ in 0..200 {
            let random = rand::gen_range(1, 16);
            handle_input(&mut cpu);
            if cpu.running {
                cpu.write_byte(0xFE, random);
                cpu.step();
            }
        }
        next_frame().await;
    }
}
